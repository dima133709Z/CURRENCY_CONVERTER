[{"C:\\CURRENCY-CONVERTER\\src\\index.tsx":"1","C:\\CURRENCY-CONVERTER\\src\\App.tsx":"2","C:\\CURRENCY-CONVERTER\\src\\utils\\currency.ts":"3","C:\\CURRENCY-CONVERTER\\src\\components\\Select.tsx":"4","C:\\CURRENCY-CONVERTER\\src\\hooks\\useOnClickOutside.tsx":"5"},{"size":272,"mtime":1689065787661,"results":"6","hashOfConfig":"7"},{"size":3323,"mtime":1689080233387,"results":"8","hashOfConfig":"7"},{"size":964,"mtime":1689080345390,"results":"9","hashOfConfig":"7"},{"size":3722,"mtime":1689078981260,"results":"10","hashOfConfig":"7"},{"size":581,"mtime":1689065787777,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"1914t92",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"15"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"C:\\CURRENCY-CONVERTER\\src\\index.tsx",[],[],[],"C:\\CURRENCY-CONVERTER\\src\\App.tsx",[],[],"C:\\CURRENCY-CONVERTER\\src\\utils\\currency.ts",[],[],"C:\\CURRENCY-CONVERTER\\src\\components\\Select.tsx",["29"],[],"import {useEffect, useRef, useState} from 'react'\nimport useOnClickOutside from '../hooks/useOnClickOutside'\n\nconst Select = ({label, value, options, stateChanger}: any) => {\n\n    const ref = useRef<any>()\n\n    const [open, setOpen] = useState(false)\n    const [selectedOption, setSelectedOption] = useState<any>(options[0])\n\n    useEffect(() => {\n\n        setSelectedOption(options.filter((option: any) => option.value === value).pop() ?? options[0])\n\n    }, [value])\n\n    const select = (option: any) => {\n\n        setSelectedOption(option)\n        stateChanger(option.value)\n        setOpen(false)\n    }\n\n    useOnClickOutside(ref, () => setOpen(false))\n\n    return (\n        <div className=\"relative mt-1\">\n\n            <button onClick={() => setOpen(open => (!open))} type=\"button\"\n                    className=\"group relative w-full cursor-default border-b bg-white pb-4 text-left hover:border-indigo-300 focus:border-indigo-600 sm:text-sm\">\n\n                <span className=\"block text-xs font-semibold text-slate-400\">{label}</span>\n\n                <div className=\"flex items-center\">\n                    <img src={'flags/' + selectedOption.value + '.png'} className=\"w-8 rounded-sm mr-3\"\n                         alt={selectedOption.text}/>\n                    <span className=\"block text-xl\">{selectedOption.text}</span>\n                </div>\n\n                <span className=\"pointer-events-none absolute inset-y-0 right-0 flex items-center\">\n          <svg className=\"h-5 w-5 text-gray-400 group-hover:text-indigo-400 group-focus:text-indigo-600\"\n               xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\n            <path fillRule=\"evenodd\"\n                  d=\"M10 3a.75.75 0 01.55.24l3.25 3.5a.75.75 0 11-1.1 1.02L10 4.852 7.3 7.76a.75.75 0 01-1.1-1.02l3.25-3.5A.75.75 0 0110 3zm-3.76 9.2a.75.75 0 011.06.04l2.7 2.908 2.7-2.908a.75.75 0 111.1 1.02l-3.25 3.5a.75.75 0 01-1.1 0l-3.25-3.5a.75.75 0 01.04-1.06z\"\n                  clipRule=\"evenodd\"/>\n          </svg>\n        </span>\n\n            </button>\n\n            {open && <ul ref={ref}\n                         className=\"absolute z-10 mt-1 max-h-56 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm\">\n\n                {options.map((option: any) => (\n                    <li key={option.value} onClick={() => {\n                        select(option)\n                    }} className=\"hover:bg-gray-100 text-gray-900 relative cursor-default select-none py-2 pl-3 pr-9\">\n\n                        <div className=\"flex items-center\">\n                            <img src={'flags/' + option.value + '.png'} className=\"w-6 rounded-sm mr-2\"\n                                 alt={option.text}/>\n                            <span\n                                className=\"font-normal block truncate\">{option.value.toUpperCase() + ' - ' + option.text}</span>\n                        </div>\n\n                        {option.value === selectedOption.value &&\n                            <span className=\"text-indigo-600 absolute inset-y-0 right-0 flex items-center pr-4\">\n              <svg className=\"h-5 w-5\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\"\n                   aria-hidden=\"true\">\n                <path fillRule=\"evenodd\"\n                      d=\"M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z\"\n                      clipRule=\"evenodd\"/>\n              </svg>\n            </span>}\n\n                    </li>\n                ))}\n\n            </ul>}\n\n        </div>\n    )\n}\n\nexport default Select","C:\\CURRENCY-CONVERTER\\src\\hooks\\useOnClickOutside.tsx",[],[],{"ruleId":"30","severity":1,"message":"31","line":15,"column":8,"nodeType":"32","endLine":15,"endColumn":15,"suggestions":"33"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'options'. Either include it or remove the dependency array. If 'setSelectedOption' needs the current value of 'options', you can also switch to useReducer instead of useState and read 'options' in the reducer.","ArrayExpression",["34"],{"desc":"35","fix":"36"},"Update the dependencies array to be: [options, value]",{"range":"37","text":"38"},[460,467],"[options, value]"]